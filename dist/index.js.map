{"version":3,"sources":["../index.js"],"names":["actionCreator","connect","create","actions","commonSelectors","defaultSelector","x","types","dispatch","actionId","Date","getTime","createStateMapper","prop","substr","state","props","action","__actionId","name","actionMetadata","handler","creator","payload","type","actionCreators","Object","entries","forEach","pair","mapStateToProps","args","split","structuredSelector","reduxConnect","initialState","currentReducer","lazyDispatch","defaultReducer","actionHandler","actionResult","setTimeout","store","middlewares","length","applyMiddleware","assign","reducer","prevReducer","Provider","React","createElement"],"mappings":"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","file":"index.js","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport React from \"react\";\r\nimport { connect as reduxConnect, Provider } from \"react-redux\";\r\nimport { createSelector, createStructuredSelector } from \"reselect\";\r\n\r\nconst actions = {};\r\nconst commonSelectors = {};\r\nconst defaultSelector = x => x;\r\nconst types = {\r\n  dispatch: \"@@dispatch\"\r\n};\r\nlet actionId = new Date().getTime();\r\n\r\nfunction createStateMapper(prop) {\r\n  if (prop[0] === \"@\") {\r\n    prop = prop.substr(1);\r\n    return (state, props) => props[prop];\r\n  }\r\n  return state => state[prop];\r\n}\r\n\r\nexport function actionCreator(action) {\r\n  if (typeof action === \"function\") {\r\n    if (!action.__actionId) {\r\n      action.__actionId = `@@${action.name}_${actionId++}`;\r\n    }\r\n    let actionMetadata = actions[action.__actionId];\r\n    if (!actionMetadata) {\r\n      actions[action.__actionId] = actionMetadata = {\r\n        handler: action,\r\n        creator(payload) {\r\n          return { type: action.__actionId, payload };\r\n        }\r\n      };\r\n    }\r\n\r\n    return actionMetadata.creator;\r\n  }\r\n  const actionCreators = {};\r\n  Object.entries(action).forEach(\r\n    pair => (actionCreators[pair[0]] = actionCreator(pair[1]))\r\n  );\r\n  return actionCreators;\r\n}\r\n\r\nexport function connect(mapStateToProps, ...args) {\r\n  if (mapStateToProps) {\r\n    // support named props\r\n    if (typeof mapStateToProps === \"string\") {\r\n      const props = mapStateToProps.split(/\\s+/);\r\n      const structuredSelector = {};\r\n      props.forEach(\r\n        prop =>\r\n          (structuredSelector[prop[0] === \"@\" ? prop.substr(1) : prop] =\r\n            commonSelectors[prop] ||\r\n            (commonSelectors[prop] = createSelector(\r\n              createStateMapper(prop),\r\n              defaultSelector\r\n            )))\r\n      );\r\n      mapStateToProps = structuredSelector;\r\n    }\r\n    if (typeof mapStateToProps !== \"function\") {\r\n      return reduxConnect(createStructuredSelector(mapStateToProps), ...args);\r\n    }\r\n  }\r\n\r\n  return reduxConnect(mapStateToProps, ...args);\r\n}\r\n\r\nexport function create(initialState = {}, ...middlewares) {\r\n  let currentReducer;\r\n\r\n  const lazyDispatch = (state, ...actions) => {\r\n    return { type: types.dispatch, state, actions };\r\n  };\r\n  const defaultReducer = (state = initialState, action) => {\r\n    // is custom action\r\n    if (action.type in actions) {\r\n      const actionHandler = actions[action.type].handler;\r\n      const actionResult = actionHandler(state, action.payload, lazyDispatch);\r\n\r\n      if (actionResult && actionResult.type === types.dispatch) {\r\n        setTimeout(() => {\r\n          actionResult.actions.forEach(action => store.dispatch(action));\r\n        }, 0);\r\n        return actionResult.state;\r\n      }\r\n      return actionResult;\r\n    }\r\n    return currentReducer ? currentReducer(state, action) : state;\r\n  };\r\n\r\n  const store = middlewares.length\r\n    ? // create store with middlewares\r\n      createStore(defaultReducer, applyMiddleware(...middlewares))\r\n    : createStore(defaultReducer);\r\n\r\n  return Object.assign({}, store, {\r\n    // register reducer\r\n    reducer(reducer) {\r\n      if (typeof reducer !== \"function\") {\r\n        reducer = combineReducers(reducer);\r\n      }\r\n      if (currentReducer) {\r\n        const prevReducer = currentReducer;\r\n        currentReducer = (state, action) =>\r\n          reducer(prevReducer(state, action), action);\r\n      } else {\r\n        currentReducer = reducer;\r\n      }\r\n    },\r\n    Provider(props) {\r\n      return React.createElement(Provider, Object.assign({ store }, props));\r\n    }\r\n  });\r\n}\r\n\r\nexport default create;\r\n"]}